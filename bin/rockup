#!/usr/bin/env ruby

require 'rockup'
require 'optparse'

opts = {
  mode: :backup,
  full: false,
  volume_type: :auto,
  compression: :auto
}

Rockup::Log.level = Logger::DEBUG if $DEBUG

OptionParser.new do |parser|

  parser.banner = 'Usage: rockup [opts] backup-dir {source-dir-1 source-dir-2 ...}'

  parser.on('-h', '--help', 'Print help') do
    puts parser
    exit
  end

  parser.on('-b', 'Perform full or incremental backup (the default mode if no other option is specified)') do end

  parser.on('-B', 'Force full backup') do
    opts[:full] = true
  end

  parser.on('-r DESTDIR', 'Restore files from backup to DESTDIR') do |dir|
    opts[:mode] = :restore
    opts[:restore] = dir
  end

  parser.on('--dry-run', 'Do not modify the filesystem in any way (no files/directories are created or modified)') do
    opts[:dry] = true
  end

  parser.on('--compress', 'Enforce compression of backed data') do
    opts[:compression] = :enforce
  end

  parser.on('--no-compress', 'Disable compression of backed data') do
    opts[:compression] = :disable
  end

  parser.on('--separate', 'Store each backup file into separate stream file; do not coalesce') do
    opts[:volume_type] = :copy
  end

  parser.on('--coalesce', 'Coalesce all backup files into single stream file') do
    opts[:volume_type] = :cat
  end

  parser.on('-q', 'Suppress all logging') do
    Rockup::Log.level = Logger::UNKNOWN
  end

  parser.on('-v', '--verbose', 'Enable logging') do
    Rockup::Log.level = Logger::INFO
  end

  parser.on('--debug', 'Enable extensive logging') do
    Rockup::Log.level = Logger::DEBUG
  end

end.parse!

backupdir =  ARGV.shift
srcdirs = ARGV

raise 'Backup directory must be specified' if backupdir.nil?

project = Rockup::Project.new(backupdir)

#project.dry = opts[:dry]

case opts[:mode]
when :backup
  raise 'At least one source directory must be specified' if srcdirs.empty?
  project.compression = opts[:compression]
  project.volume_type = opts[:volume_type]
  project.backup!(srcdirs, opts[:full])
when :restore
  project.restore!(opts[:restore])
end
